{"ast":null,"code":"import _slicedToArray from\"D:/tele-health/tele-health-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from'react';import{useState,useEffect,useContext}from'react';import ListGroup from'react-bootstrap/ListGroup';import Figure from'react-bootstrap/Figure';import axios from'axios';import{AppContext}from'./App';import{BASEURL}from'./baseURL';import{AWSBASEIMAGES}from'./baseURL';import UploadImageButton from'./UploadImageButton';import{decrypt}from'./encrypt.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function PatientImagesPage(){var _useContext=useContext(AppContext),patientId=_useContext.patientId;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),imageList=_useState2[0],setImageList=_useState2[1];useEffect(function(){axios.get(BASEURL+\"/profile/my_image_list/\".concat(patientId)).then(function(response){var imageList=response.data;var decryptionPromises=imageList.map(function(image){var str=image.image;var lastSlashIndex=str.lastIndexOf('/');var result=str.substring(lastSlashIndex);var url=AWSBASEIMAGES+result;return axios.get(url,{responseType:'blob'}).then(function(response){var blob=response.data;var filename=image.image.split('/').pop();var file=new File([blob],filename,{type:image.mime_type});return decrypt(file,image.key);});});Promise.all(decryptionPromises).then(function(decryptedFiles){var decryptedImages=decryptedFiles.map(function(file){return URL.createObjectURL(file);});setImageList(decryptedImages);console.log(decryptedImages);}).catch(function(error){console.error(error);});}).catch(function(error){console.error(error);});},[]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(ListGroup,{className:\"list-unstyled\",children:imageList.map(function(imageUrl,index){return/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(ListGroup.Item,{children:/*#__PURE__*/_jsx(Figure.Image,{src:imageUrl})})},index);})}),/*#__PURE__*/_jsx(UploadImageButton,{imageList:imageList,setImageList:setImageList})]});}export default PatientImagesPage;","map":{"version":3,"names":["React","useState","useEffect","useContext","ListGroup","Figure","axios","AppContext","BASEURL","AWSBASEIMAGES","UploadImageButton","decrypt","jsx","_jsx","jsxs","_jsxs","PatientImagesPage","_useContext","patientId","_useState","_useState2","_slicedToArray","imageList","setImageList","get","concat","then","response","data","decryptionPromises","map","image","str","lastSlashIndex","lastIndexOf","result","substring","url","responseType","blob","filename","split","pop","file","File","type","mime_type","key","Promise","all","decryptedFiles","decryptedImages","URL","createObjectURL","console","log","catch","error","children","className","imageUrl","index","Item","Image","src"],"sources":["D:/tele-health/tele-health-react/src/PatientImagesPage.js"],"sourcesContent":["import React from 'react'\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Figure from 'react-bootstrap/Figure';\r\nimport axios from 'axios';\r\nimport { AppContext } from './App';\r\nimport { BASEURL } from './baseURL';\r\nimport { AWSBASEIMAGES } from './baseURL';\r\nimport UploadImageButton from './UploadImageButton'\r\nimport {decrypt} from './encrypt.js'\r\n\r\n\r\n\r\nfunction PatientImagesPage() {\r\n\r\n    const {patientId} = useContext(AppContext);\r\n    const [imageList, setImageList] = useState([]);\r\n\r\n\r\n\r\n    useEffect(() =>{\r\n        axios\r\n        .get(BASEURL+`/profile/my_image_list/${patientId}`)\r\n        .then(function (response) {\r\n            const imageList = response.data;\r\n            const decryptionPromises = imageList.map((image) =>{\r\n                const str = image.image;\r\n                const lastSlashIndex = str.lastIndexOf('/');\r\n                const result = str.substring(lastSlashIndex);\r\n                const url = AWSBASEIMAGES + result;\r\n                return axios\r\n                .get(url, { responseType: 'blob' })\r\n                .then((response) => {\r\n                    const blob = response.data;\r\n                    const filename = image.image.split('/').pop(); \r\n                    const file = new File([blob], filename, { type: image.mime_type });\r\n                    return decrypt(file, image.key);\r\n                });\r\n            });\r\n            Promise.all(decryptionPromises)\r\n            .then((decryptedFiles) => {\r\n            const decryptedImages = decryptedFiles.map((file) =>\r\n                URL.createObjectURL(file)\r\n            );\r\n            setImageList(decryptedImages);\r\n            console.log(decryptedImages)\r\n            })\r\n            .catch((error) => {\r\n            console.error(error);\r\n            });\r\n        })\r\n        .catch((error) => {\r\n        console.error(error);\r\n        });\r\n    }, []);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n        <ListGroup className=\"list-unstyled\">\r\n            {imageList.map((imageUrl, index) => (\r\n                <li key={index}>\r\n                    <ListGroup.Item>\r\n                        <Figure.Image\r\n                        src={imageUrl}\r\n                        />\r\n                </ListGroup.Item>\r\n                </li>\r\n            ))}\r\n        </ListGroup>\r\n        <UploadImageButton \r\n        imageList = {imageList}\r\n        setImageList = {setImageList}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PatientImagesPage"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}