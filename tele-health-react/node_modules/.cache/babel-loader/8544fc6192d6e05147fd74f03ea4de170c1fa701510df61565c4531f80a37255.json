{"ast":null,"code":"var _jsxFileName = \"D:\\\\tele-health\\\\tele-health-react\\\\src\\\\PatientImagesPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useEffect, useContext } from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Figure from 'react-bootstrap/Figure';\nimport axios from 'axios';\nimport { AppContext } from './App';\nimport { BASEURL } from './baseURL';\nimport UploadImageButton from './UploadImageButton';\nimport { decrypt } from './encrypt.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PatientImagesPage() {\n  _s();\n  const {\n    patientId\n  } = useContext(AppContext);\n  const [imageList, setImageList] = useState([]);\n  const [decryptedImages, setDecryptedImages] = useState([]);\n\n  // useEffect(()=> {\n  //     axios.get(BASEURL+`/profile/my_image_list/${patientId}`)\n  //     .then(function (response) {\n  //         //setImageList(response.data);\n  //         const imageList = response.data;\n  //         const imagePromises = imageList.map((image) =>\n  //         axios.get(`${BASEURL}${image.image}`, { responseType: 'blob' })\n  //         );\n  //         console.log(response);\n\n  //         Promise.all(imagePromises)\n  //         .then((responses) => {\n  //         const files = responses.map((response, index) => {\n  //         const blob = response.data;\n  //         const filename = `image_${index}.jpg`;\n  //         return new File([blob], filename, { type: 'image/jpeg' });\n  //       });\n\n  //       console.log(files);\n  //       // Use the files as needed\n  //       const decryptionPromises  = files.map((file) =>{\n  //         decrypt(file, response.data.key)\n  //       });\n  //     })\n  //     .catch((error) => {\n  //       console.error(error);\n  //     });\n\n  //       })\n  //     .catch(function (error) {\n  //         console.log(error);\n  //     });\n\n  // }, [])\n\n  useEffect(() => {\n    axios.get(BASEURL + `/profile/my_image_list/${patientId}`).then(function (response) {\n      const imageList = response.data;\n      const decryptionPromises = imageList.map(image => {\n        const url = BASEURL + image.image;\n        return axios.get(url, {\n          responseType: 'blob'\n        }).then(response => {\n          const blob = response.data;\n          const filename = `image_${image.id}.jpg`;\n          const file = new File([blob], filename, {\n            type: 'image/jpeg'\n          });\n          return decrypt(file, image.key);\n        });\n      });\n      Promise.all(decryptionPromises).then(decryptedFiles => {\n        const decryptedImages = decryptedFiles.map(file => URL.createObjectURL(file));\n        setDecryptedImages(decryptedImages);\n      }).catch(error => {\n        console.error(error);\n      });\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ListGroup, {\n      className: \"list-unstyled\",\n      children: imageList.map(image => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          children: /*#__PURE__*/_jsxDEV(Figure.Image, {\n            src: `http://127.0.0.1:8000${image.image}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, image.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(UploadImageButton, {\n      imageList: imageList,\n      setImageList: setImageList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(PatientImagesPage, \"LgMrv+HQ1RLlSkDeJJq3Bwc5lvU=\");\n_c = PatientImagesPage;\nexport default PatientImagesPage;\nvar _c;\n$RefreshReg$(_c, \"PatientImagesPage\");","map":{"version":3,"names":["React","useState","useEffect","useContext","ListGroup","Figure","axios","AppContext","BASEURL","UploadImageButton","decrypt","jsxDEV","_jsxDEV","PatientImagesPage","_s","patientId","imageList","setImageList","decryptedImages","setDecryptedImages","get","then","response","data","decryptionPromises","map","image","url","responseType","blob","filename","id","file","File","type","key","Promise","all","decryptedFiles","URL","createObjectURL","catch","error","console","children","className","Item","Image","src","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/tele-health/tele-health-react/src/PatientImagesPage.js"],"sourcesContent":["import React from 'react'\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Figure from 'react-bootstrap/Figure';\r\nimport axios from 'axios';\r\nimport { AppContext } from './App';\r\nimport { BASEURL } from './baseURL';\r\nimport UploadImageButton from './UploadImageButton'\r\nimport {decrypt} from './encrypt.js'\r\n\r\n\r\n\r\nfunction PatientImagesPage() {\r\n\r\n    const {patientId} = useContext(AppContext);\r\n    const [imageList, setImageList] = useState([]);\r\n    const [decryptedImages, setDecryptedImages] = useState([]);\r\n\r\n    // useEffect(()=> {\r\n    //     axios.get(BASEURL+`/profile/my_image_list/${patientId}`)\r\n    //     .then(function (response) {\r\n    //         //setImageList(response.data);\r\n    //         const imageList = response.data;\r\n    //         const imagePromises = imageList.map((image) =>\r\n    //         axios.get(`${BASEURL}${image.image}`, { responseType: 'blob' })\r\n    //         );\r\n    //         console.log(response);\r\n\r\n    //         Promise.all(imagePromises)\r\n    //         .then((responses) => {\r\n    //         const files = responses.map((response, index) => {\r\n    //         const blob = response.data;\r\n    //         const filename = `image_${index}.jpg`;\r\n    //         return new File([blob], filename, { type: 'image/jpeg' });\r\n    //       });\r\n\r\n    //       console.log(files);\r\n    //       // Use the files as needed\r\n    //       const decryptionPromises  = files.map((file) =>{\r\n    //         decrypt(file, response.data.key)\r\n    //       });\r\n    //     })\r\n    //     .catch((error) => {\r\n    //       console.error(error);\r\n    //     });\r\n            \r\n    //       })\r\n    //     .catch(function (error) {\r\n    //         console.log(error);\r\n    //     });\r\n    \r\n    // }, [])\r\n\r\n    useEffect(() =>{\r\n        axios\r\n        .get(BASEURL+`/profile/my_image_list/${patientId}`)\r\n        .then(function (response) {\r\n            const imageList = response.data;\r\n            const decryptionPromises = imageList.map((image) =>{\r\n                const url = BASEURL + image.image;\r\n                return axios\r\n                .get(url, { responseType: 'blob' })\r\n                .then((response) => {\r\n                    const blob = response.data;\r\n                    const filename = `image_${image.id}.jpg`;\r\n                    const file = new File([blob], filename, { type: 'image/jpeg' });\r\n                    return decrypt(file, image.key);\r\n                });\r\n            });\r\n            Promise.all(decryptionPromises)\r\n            .then((decryptedFiles) => {\r\n            const decryptedImages = decryptedFiles.map((file) =>\r\n                URL.createObjectURL(file)\r\n            );\r\n            setDecryptedImages(decryptedImages);\r\n            })\r\n            .catch((error) => {\r\n            console.error(error);\r\n            });\r\n        })\r\n        .catch((error) => {\r\n        console.error(error);\r\n        });\r\n    }, []);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n        <ListGroup className=\"list-unstyled\">\r\n            {imageList.map((image) => (\r\n                <li key={image.id}>\r\n                    <ListGroup.Item>\r\n                        <Figure.Image\r\n                        src={`http://127.0.0.1:8000${image.image}`}\r\n                        />\r\n                </ListGroup.Item>\r\n                </li>\r\n            ))}\r\n        </ListGroup>\r\n        <UploadImageButton \r\n        imageList = {imageList}\r\n        setImageList = {setImageList}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PatientImagesPage"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}