{"ast":null,"code":"let key = \"\";\nexport default function encrypt(file, callback) {\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n  reader.onload = () => {\n    const image = new Image();\n    image.src = reader.result;\n    image.onload = () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(image, 0, 0);\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const encryptedImageData = scramble(imageData, (source, diff) => {\n        return leftRotate(source, diff);\n      }, true);\n      const encryptedImageDataFinal = encryptImageData1(encryptedImageData);\n      ctx.putImageData(encryptedImageDataFinal, 0, 0);\n      canvas.toBlob(blob => {\n        const mykey = key;\n        key = '';\n        callback([blob, mykey]);\n      }, 'image/png');\n    };\n  };\n}\nexport function decrypt(file, mykey, callback) {\n  key = mykey;\n  // const reader = new FileReader();\n  // reader.readAsDataURL(file);\n  // reader.onload = () => {\n  const image = new Image();\n  image.src = reader.result;\n  image.onload = () => {\n    const canvas = document.createElement('canvas');\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, 0, 0);\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const decryptedImageData1 = decryptImageData1(imageData);\n    const decryptedImageDataFinal = scramble(decryptedImageData1, (source, diff) => {\n      return rightRotate(source, diff);\n    }, false);\n    ctx.putImageData(decryptedImageDataFinal, 0, 0);\n    canvas.toBlob(blob => {\n      key = '';\n      callback(blob);\n    }, 'image/png');\n  };\n  // }\n}\n\nfunction encryptImageData1(imageData) {\n  let x = getRandomValue1();\n  let r = getRandomValue2();\n  const rKey = r.toString().substring(r.toString().indexOf('.') + 1);\n  const xKey = x.toString().substring(x.toString().indexOf('.') + 1);\n  key += String(xKey);\n  key += String(rKey);\n  for (let i = 0; i < imageData.data.length; i++) {\n    x = r * x * (1 - x);\n    imageData.data[i] ^= Math.floor(x * 256);\n  }\n  return imageData;\n}\nfunction decryptImageData1(encryptedImageData) {\n  let x = key.slice(256, 264);\n  x = Number(parseFloat(\"0.\" + x));\n  let r = key.slice(264, 272);\n  r = Number(parseFloat(\"3.\" + r));\n  for (let i = 0; i < encryptedImageData.data.length; i++) {\n    x = r * x * (1 - x);\n    encryptedImageData.data[i] ^= Math.floor(x * 256);\n  }\n  return encryptedImageData;\n}\nfunction getRandomValue1() {\n  const allowedChars = '0123456789';\n  let randomString = '';\n  for (let i = 0; i < 8; i++) {\n    const randomIndex = Math.floor(Math.random() * allowedChars.length);\n    randomString += allowedChars[randomIndex];\n  }\n  return `0.${randomString}`;\n}\nfunction getRandomValue2() {\n  const allowedChars = '0123456789';\n  let randomString = '';\n  for (let i = 0; i < 7; i++) {\n    const randomIndex = Math.floor(Math.random() * allowedChars.length);\n    randomString += allowedChars[randomIndex];\n  }\n  return `3.7${randomString}`;\n}\nfunction getRandomValue3() {\n  const length = 256;\n  const allowedChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let randomString = '';\n  for (let i = 0; i < 256; i++) {\n    const randomIndex = Math.floor(Math.random() * allowedChars.length);\n    randomString += allowedChars[randomIndex];\n  }\n  return randomString;\n}\nfunction scramble(imageData, rotateFunction, isEncrypt) {\n  let rand;\n  if (isEncrypt) {\n    rand = getRandomValue3();\n    key += rand;\n  }\n  if (!isEncrypt) {\n    rand = key.slice(0, 256);\n  }\n  let random = new Math.seedrandom(rand);\n  let max = 257;\n  let min = 0;\n  for (let index = 0; index < imageData.data.length / 4; index++) {\n    let randomNum = () => Math.floor(random() * (max - min)) + min;\n    let colorData = getPixel(imageData, index);\n    colorData[0] = rotateFunction(colorData[0], randomNum());\n    colorData[1] = rotateFunction(colorData[1], randomNum());\n    colorData[2] = rotateFunction(colorData[2], randomNum());\n    setPixelXY(imageData, Math.floor(index % imageData.width), Math.floor(index / imageData.width), colorData[0], colorData[1], colorData[2], 255);\n  }\n  return imageData;\n}\nlet count = 0;\nfunction rightRotate(source, diff) {\n  let circleSize = 256;\n  let rotatedVal = (source + diff) % circleSize;\n  if (rotatedVal < 0 || rotatedVal > 255) {\n    alert(\"wrong\");\n  }\n  return (source + diff) % circleSize;\n}\nfunction leftRotate(source, diff) {\n  let circleSize = 256;\n  if (source >= diff) {\n    return source - diff;\n  } else {\n    return circleSize - (diff - source);\n  }\n}\nfunction getPixel(imgData, index) {\n  var i = index * 4,\n    d = imgData.data;\n  return [d[i], d[i + 1], d[i + 2], d[i + 3]];\n}\nfunction getPixelXY(imgData, x, y) {\n  return getPixel(imgData, y * imgData.width + x);\n}\nfunction setPixel(imgData, index, r, g, b, a) {\n  var i = index * 4,\n    d = imgData.data;\n  d[i] = r;\n  d[i + 1] = g;\n  d[i + 2] = b;\n  d[i + 3] = a;\n}\nfunction setPixelXY(imgData, x, y, r, g, b, a) {\n  return setPixel(imgData, y * imgData.width + x, r, g, b, a);\n}","map":{"version":3,"names":["key","encrypt","file","callback","reader","FileReader","readAsDataURL","onload","image","Image","src","result","canvas","document","createElement","width","height","ctx","getContext","drawImage","imageData","getImageData","encryptedImageData","scramble","source","diff","leftRotate","encryptedImageDataFinal","encryptImageData1","putImageData","toBlob","blob","mykey","decrypt","decryptedImageData1","decryptImageData1","decryptedImageDataFinal","rightRotate","x","getRandomValue1","r","getRandomValue2","rKey","toString","substring","indexOf","xKey","String","i","data","length","Math","floor","slice","Number","parseFloat","allowedChars","randomString","randomIndex","random","getRandomValue3","rotateFunction","isEncrypt","rand","seedrandom","max","min","index","randomNum","colorData","getPixel","setPixelXY","count","circleSize","rotatedVal","alert","imgData","d","getPixelXY","y","setPixel","g","b","a"],"sources":["D:/tele-health/tele-health-react/src/encrypt.js"],"sourcesContent":["let key = \"\";\r\n\r\nexport default function encrypt(file, callback){\r\n\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n\r\n    reader.onload = () => {\r\n        const image = new Image();\r\n        image.src = reader.result;\r\n\r\n        image.onload = () => {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = image.width;\r\n            canvas.height = image.height;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(image, 0, 0);\r\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n            const encryptedImageData = scramble(imageData, (source, diff) => {\r\n                return leftRotate(source, diff);\r\n            }, true)\r\n            const encryptedImageDataFinal = encryptImageData1(encryptedImageData);\r\n            ctx.putImageData(encryptedImageDataFinal, 0, 0);\r\n\r\n            canvas.toBlob((blob) => {\r\n                const mykey = key;\r\n                key = '';\r\n                callback([blob, mykey]);\r\n              }, 'image/png');\r\n        }\r\n    }\r\n}\r\n\r\nexport function decrypt(file, mykey, callback){\r\n\r\n    key = mykey;\r\n    // const reader = new FileReader();\r\n    // reader.readAsDataURL(file);\r\n    // reader.onload = () => {\r\n        const image = new Image();\r\n        image.src = reader.result;\r\n\r\n        image.onload = () => {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = image.width;\r\n            canvas.height = image.height;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(image, 0, 0);\r\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n            const decryptedImageData1 = decryptImageData1(imageData);\r\n            const decryptedImageDataFinal = scramble(decryptedImageData1, (source, diff) => {\r\n                return rightRotate(source, diff);\r\n            }, false)\r\n            ctx.putImageData(decryptedImageDataFinal, 0, 0);\r\n\r\n            canvas.toBlob((blob) => {\r\n                key = '';\r\n                callback(blob);\r\n              }, 'image/png');\r\n        }\r\n    // }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction encryptImageData1(imageData) {\r\n    let x = getRandomValue1(); \r\n    let r = getRandomValue2(); \r\n    const rKey = r.toString().substring(r.toString().indexOf('.') + 1);\r\n    const xKey = x.toString().substring(x.toString().indexOf('.') + 1);\r\n    key += String(xKey);\r\n    key += String(rKey);\r\n    for (let i = 0; i < imageData.data.length; i++) {\r\n      x = r * x * (1 - x); \r\n      imageData.data[i] ^= Math.floor(x * 256);\r\n    }\r\n    return imageData;\r\n}\r\n\r\n\r\nfunction decryptImageData1(encryptedImageData) {\r\n    let x = key.slice(256, 264);\r\n    x = Number(parseFloat(\"0.\" + x));\r\n    let r = key.slice(264, 272);\r\n    r = Number(parseFloat(\"3.\" + r));\r\n    for (let i = 0; i < encryptedImageData.data.length; i++) {\r\n      x = r * x * (1 - x);\r\n      encryptedImageData.data[i] ^= Math.floor(x * 256); \r\n    }\r\n    return encryptedImageData;\r\n}\r\n\r\n\r\nfunction getRandomValue1() {\r\n    const allowedChars = '0123456789';\r\n\r\n    let randomString = '';\r\n    for (let i = 0; i < 8; i++) {\r\n        const randomIndex = Math.floor(Math.random() * allowedChars.length);\r\n        randomString += allowedChars[randomIndex];\r\n    }\r\n    return `0.${randomString}`;\r\n}\r\n\r\nfunction getRandomValue2() {\r\n    const allowedChars = '0123456789';\r\n\r\n    let randomString = '';\r\n    for (let i = 0; i < 7; i++) {\r\n        const randomIndex = Math.floor(Math.random() * allowedChars.length);\r\n        randomString += allowedChars[randomIndex];\r\n    }\r\n    return `3.7${randomString}`;\r\n}\r\n\r\n\r\nfunction getRandomValue3() {\r\n    const length = 256;\r\n\r\n    const allowedChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    let randomString = '';\r\n    for (let i = 0; i < 256; i++) {\r\n        const randomIndex = Math.floor(Math.random() * allowedChars.length);\r\n        randomString += allowedChars[randomIndex];\r\n    }\r\n    return randomString;\r\n}\r\n\r\n\r\nfunction scramble(imageData, rotateFunction, isEncrypt) {\r\n    let rand;\r\n    if(isEncrypt)\r\n    {\r\n        rand = getRandomValue3();\r\n        key += rand;\r\n    }\r\n    if(!isEncrypt)\r\n    {\r\n        rand = key.slice(0, 256);\r\n    }\r\n    let random = new Math.seedrandom(rand);\r\n    let max = 257;\r\n    let min = 0;\r\n    for (let index = 0; index < imageData.data.length / 4; index++) {\r\n        let randomNum = () => Math.floor(random() * (max - min)) + min;\r\n        let colorData = getPixel(imageData, index);\r\n        colorData[0] = rotateFunction(colorData[0], randomNum());\r\n        colorData[1] = rotateFunction(colorData[1], randomNum());\r\n        colorData[2] = rotateFunction(colorData[2], randomNum());\r\n        setPixelXY(imageData, Math.floor(index % imageData.width), Math.floor(index / imageData.width), colorData[0], colorData[1], colorData[2], 255);\r\n    }\r\n    return imageData;\r\n}\r\n\r\nlet count = 0;\r\n\r\nfunction rightRotate(source, diff) {\r\n    let circleSize = 256;\r\n    let rotatedVal = (source + diff) % circleSize;\r\n    if (rotatedVal < 0 || rotatedVal > 255) {\r\n        alert(\"wrong\");\r\n    }\r\n    return (source + diff) % circleSize;\r\n}\r\n\r\nfunction leftRotate(source, diff) {\r\n    let circleSize = 256;\r\n    if (source >= diff) {\r\n        return source - diff;\r\n    }\r\n    else {\r\n        return circleSize - (diff - source);\r\n    }\r\n}\r\n\r\n\r\nfunction getPixel(imgData, index) {\r\n    var i = index * 4, d = imgData.data;\r\n    return [d[i], d[i + 1], d[i + 2], d[i + 3]]\r\n}\r\n\r\nfunction getPixelXY(imgData, x, y) {\r\n    return getPixel(imgData, y * imgData.width + x);\r\n}\r\n\r\nfunction setPixel(imgData, index, r, g, b, a) {\r\n    var i = index * 4, d = imgData.data;\r\n    d[i] = r;\r\n    d[i + 1] = g;\r\n    d[i + 2] = b;\r\n    d[i + 3] = a;\r\n}\r\n\r\nfunction setPixelXY(imgData, x, y, r, g, b, a) {\r\n    return setPixel(imgData, y * imgData.width + x, r, g, b, a);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}