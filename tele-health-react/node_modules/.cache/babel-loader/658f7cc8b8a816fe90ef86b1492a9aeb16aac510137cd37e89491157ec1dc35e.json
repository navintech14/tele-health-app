{"ast":null,"code":"let key = \"\";\nexport default function encrypt(file, callback) {\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n  reader.onload = () => {\n    const image = new Image();\n    image.src = reader.result;\n    image.onload = () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(image, 0, 0);\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      const encryptedImageData = scramble(imageData, (source, diff) => {\n        return leftRotate(source, diff);\n      }, true);\n      const encryptedImageDataFinal = encryptImageData1(encryptedImageData);\n      ctx.putImageData(encryptedImageDataFinal, 0, 0);\n      canvas.toBlob(blob => {\n        const mykey = key;\n        key = '';\n        callback([blob, mykey]);\n      }, 'image/png');\n    };\n  };\n}\n\n// export function decrypt(file, mykey){ \n//     console.log(file, mykey)\n//     return new Promise((resolve, reject) => {\n//         const img = new Image();\n//         const reader = new FileReader();\n//         key = mykey;\n//         reader.onload = () => {\n//             img.onload = () => {\n//                 const canvas = document.createElement('canvas');\n//                 canvas.width = img.width;\n//                 canvas.height = img.height;\n//                 const ctx = canvas.getContext('2d');\n//                 ctx.drawImage(img, 0, 0);\n//                 const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n//                 const decryptedImageData1 = decryptImageData1(imageData);\n//                 const decryptedImageDataFinal = scramble(decryptedImageData1, (source, diff) => {\n//                     return rightRotate(source, diff);\n//                 }, false)\n//                 imageData.data.set(decryptedImageDataFinal);\n//                 ctx.putImageData(imageData, 0, 0);\n//                 key = \"\";\n//                 canvas.toBlob((blob) => {\n//                     const decryptedFile = new File([blob], file.name, { type: file.type });\n//                     resolve(decryptedFile);\n//                   }, file.type);\n//                 };\n//                 img.src = reader.result;\n//                 };\n//                 key = \"\";\n//                 reader.readAsDataURL(file);\n//     });\n// }\n\nexport function decrypt(file, mykey) {\n  console.log(file, mykey);\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    key = mykey;\n    reader.onload = () => {\n      const image = new Image();\n      image.src = reader.result;\n      image.onload = () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(image, 0, 0);\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        const decryptedImageData1 = decryptImageData1(imageData);\n        const decryptedImageDataFinal = scramble(decryptedImageData1, (source, diff) => {\n          return rightRotate(source, diff);\n        }, false);\n        ctx.putImageData(decryptedImageDataFinal, 0, 0);\n        key = \"\";\n        ctx.toBlob(blob => {\n          const decryptedFile = new File([blob], file.name, {\n            type: file.type\n          });\n          resolve(decryptedFile);\n        }, file.type);\n        ctx.readAsDataURL(file);\n      };\n    };\n  });\n}\nfunction encryptImageData1(imageData) {\n  let x = getRandomValue1();\n  let r = getRandomValue2();\n  const rKey = r.toString().substring(r.toString().indexOf('.') + 1);\n  const xKey = x.toString().substring(x.toString().indexOf('.') + 1);\n  key += String(xKey);\n  key += String(rKey);\n  for (let i = 0; i < imageData.data.length; i++) {\n    x = r * x * (1 - x);\n    imageData.data[i] ^= Math.floor(x * 256);\n  }\n  return imageData;\n}\nfunction decryptImageData1(encryptedImageData) {\n  let x = key.slice(256, 264);\n  x = Number(parseFloat(\"0.\" + x));\n  let r = key.slice(264, 272);\n  r = Number(parseFloat(\"3.\" + r));\n  for (let i = 0; i < encryptedImageData.data.length; i++) {\n    x = r * x * (1 - x);\n    encryptedImageData.data[i] ^= Math.floor(x * 256);\n  }\n  return encryptedImageData;\n}\nfunction getRandomValue1() {\n  const allowedChars = '0123456789';\n  let randomString = '';\n  for (let i = 0; i < 8; i++) {\n    const randomIndex = Math.floor(Math.random() * allowedChars.length);\n    randomString += allowedChars[randomIndex];\n  }\n  return `0.${randomString}`;\n}\nfunction getRandomValue2() {\n  const allowedChars = '0123456789';\n  let randomString = '';\n  for (let i = 0; i < 7; i++) {\n    const randomIndex = Math.floor(Math.random() * allowedChars.length);\n    randomString += allowedChars[randomIndex];\n  }\n  return `3.7${randomString}`;\n}\nfunction getRandomValue3() {\n  const length = 256;\n  const allowedChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let randomString = '';\n  for (let i = 0; i < 256; i++) {\n    const randomIndex = Math.floor(Math.random() * allowedChars.length);\n    randomString += allowedChars[randomIndex];\n  }\n  return randomString;\n}\nfunction scramble(imageData, rotateFunction, isEncrypt) {\n  let rand;\n  if (isEncrypt) {\n    rand = getRandomValue3();\n    key += rand;\n  }\n  if (!isEncrypt) {\n    rand = key.slice(0, 256);\n  }\n  let random = new Math.seedrandom(rand);\n  let max = 257;\n  let min = 0;\n  for (let index = 0; index < imageData.data.length / 4; index++) {\n    let randomNum = () => Math.floor(random() * (max - min)) + min;\n    let colorData = getPixel(imageData, index);\n    colorData[0] = rotateFunction(colorData[0], randomNum());\n    colorData[1] = rotateFunction(colorData[1], randomNum());\n    colorData[2] = rotateFunction(colorData[2], randomNum());\n    setPixelXY(imageData, Math.floor(index % imageData.width), Math.floor(index / imageData.width), colorData[0], colorData[1], colorData[2], 255);\n  }\n  return imageData;\n}\nlet count = 0;\nfunction rightRotate(source, diff) {\n  let circleSize = 256;\n  let rotatedVal = (source + diff) % circleSize;\n  if (rotatedVal < 0 || rotatedVal > 255) {\n    alert(\"wrong\");\n  }\n  return (source + diff) % circleSize;\n}\nfunction leftRotate(source, diff) {\n  let circleSize = 256;\n  if (source >= diff) {\n    return source - diff;\n  } else {\n    return circleSize - (diff - source);\n  }\n}\nfunction getPixel(imgData, index) {\n  var i = index * 4,\n    d = imgData.data;\n  return [d[i], d[i + 1], d[i + 2], d[i + 3]];\n}\nfunction getPixelXY(imgData, x, y) {\n  return getPixel(imgData, y * imgData.width + x);\n}\nfunction setPixel(imgData, index, r, g, b, a) {\n  var i = index * 4,\n    d = imgData.data;\n  d[i] = r;\n  d[i + 1] = g;\n  d[i + 2] = b;\n  d[i + 3] = a;\n}\nfunction setPixelXY(imgData, x, y, r, g, b, a) {\n  return setPixel(imgData, y * imgData.width + x, r, g, b, a);\n}","map":{"version":3,"names":["key","encrypt","file","callback","reader","FileReader","readAsDataURL","onload","image","Image","src","result","canvas","document","createElement","width","height","ctx","getContext","drawImage","imageData","getImageData","encryptedImageData","scramble","source","diff","leftRotate","encryptedImageDataFinal","encryptImageData1","putImageData","toBlob","blob","mykey","decrypt","console","log","Promise","resolve","reject","decryptedImageData1","decryptImageData1","decryptedImageDataFinal","rightRotate","decryptedFile","File","name","type","x","getRandomValue1","r","getRandomValue2","rKey","toString","substring","indexOf","xKey","String","i","data","length","Math","floor","slice","Number","parseFloat","allowedChars","randomString","randomIndex","random","getRandomValue3","rotateFunction","isEncrypt","rand","seedrandom","max","min","index","randomNum","colorData","getPixel","setPixelXY","count","circleSize","rotatedVal","alert","imgData","d","getPixelXY","y","setPixel","g","b","a"],"sources":["D:/tele-health/tele-health-react/src/encrypt.js"],"sourcesContent":["let key = \"\";\r\n\r\nexport default function encrypt(file, callback){\r\n\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n\r\n    reader.onload = () => {\r\n        const image = new Image();\r\n        image.src = reader.result;\r\n\r\n        image.onload = () => {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = image.width;\r\n            canvas.height = image.height;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(image, 0, 0);\r\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n            const encryptedImageData = scramble(imageData, (source, diff) => {\r\n                return leftRotate(source, diff);\r\n            }, true)\r\n            const encryptedImageDataFinal = encryptImageData1(encryptedImageData);\r\n            ctx.putImageData(encryptedImageDataFinal, 0, 0);\r\n\r\n            canvas.toBlob((blob) => {\r\n                const mykey = key;\r\n                key = '';\r\n                callback([blob, mykey]);\r\n              }, 'image/png');\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n// export function decrypt(file, mykey){ \r\n//     console.log(file, mykey)\r\n//     return new Promise((resolve, reject) => {\r\n//         const img = new Image();\r\n//         const reader = new FileReader();\r\n//         key = mykey;\r\n//         reader.onload = () => {\r\n//             img.onload = () => {\r\n//                 const canvas = document.createElement('canvas');\r\n//                 canvas.width = img.width;\r\n//                 canvas.height = img.height;\r\n//                 const ctx = canvas.getContext('2d');\r\n//                 ctx.drawImage(img, 0, 0);\r\n//                 const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n//                 const decryptedImageData1 = decryptImageData1(imageData);\r\n//                 const decryptedImageDataFinal = scramble(decryptedImageData1, (source, diff) => {\r\n//                     return rightRotate(source, diff);\r\n//                 }, false)\r\n//                 imageData.data.set(decryptedImageDataFinal);\r\n//                 ctx.putImageData(imageData, 0, 0);\r\n//                 key = \"\";\r\n//                 canvas.toBlob((blob) => {\r\n//                     const decryptedFile = new File([blob], file.name, { type: file.type });\r\n//                     resolve(decryptedFile);\r\n//                   }, file.type);\r\n//                 };\r\n//                 img.src = reader.result;\r\n//                 };\r\n//                 key = \"\";\r\n//                 reader.readAsDataURL(file);\r\n//     });\r\n// }\r\n\r\n\r\nexport function decrypt(file, mykey){ \r\n    console.log(file, mykey)\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        key = mykey;\r\n        \r\n        reader.onload = () => {\r\n            const image = new Image();\r\n            image.src = reader.result;\r\n\r\n            image.onload = () => {\r\n                const canvas = document.createElement('canvas');\r\n                canvas.width = image.width;\r\n                canvas.height = image.height;\r\n                const ctx = canvas.getContext('2d');\r\n                ctx.drawImage(image, 0, 0);\r\n                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n                const decryptedImageData1 = decryptImageData1(imageData);\r\n                const decryptedImageDataFinal = scramble(decryptedImageData1, (source, diff) => {\r\n                    return rightRotate(source, diff);\r\n                }, false)\r\n                ctx.putImageData(decryptedImageDataFinal, 0, 0);\r\n                key = \"\";\r\n                ctx.toBlob((blob) => {\r\n                    const decryptedFile = new File([blob], file.name, { type: file.type });\r\n                    resolve(decryptedFile);\r\n                }, file.type);\r\n                ctx.readAsDataURL(file)\r\n\r\n            }\r\n        }\r\n        \r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction encryptImageData1(imageData) {\r\n    let x = getRandomValue1(); \r\n    let r = getRandomValue2(); \r\n    const rKey = r.toString().substring(r.toString().indexOf('.') + 1);\r\n    const xKey = x.toString().substring(x.toString().indexOf('.') + 1);\r\n    key += String(xKey);\r\n    key += String(rKey);\r\n    for (let i = 0; i < imageData.data.length; i++) {\r\n      x = r * x * (1 - x); \r\n      imageData.data[i] ^= Math.floor(x * 256);\r\n    }\r\n    return imageData;\r\n}\r\n\r\n\r\nfunction decryptImageData1(encryptedImageData) {\r\n    let x = key.slice(256, 264);\r\n    x = Number(parseFloat(\"0.\" + x));\r\n    let r = key.slice(264, 272);\r\n    r = Number(parseFloat(\"3.\" + r));\r\n    for (let i = 0; i < encryptedImageData.data.length; i++) {\r\n      x = r * x * (1 - x);\r\n      encryptedImageData.data[i] ^= Math.floor(x * 256); \r\n    }\r\n    return encryptedImageData;\r\n}\r\n\r\n\r\nfunction getRandomValue1() {\r\n    const allowedChars = '0123456789';\r\n\r\n    let randomString = '';\r\n    for (let i = 0; i < 8; i++) {\r\n        const randomIndex = Math.floor(Math.random() * allowedChars.length);\r\n        randomString += allowedChars[randomIndex];\r\n    }\r\n    return `0.${randomString}`;\r\n}\r\n\r\nfunction getRandomValue2() {\r\n    const allowedChars = '0123456789';\r\n\r\n    let randomString = '';\r\n    for (let i = 0; i < 7; i++) {\r\n        const randomIndex = Math.floor(Math.random() * allowedChars.length);\r\n        randomString += allowedChars[randomIndex];\r\n    }\r\n    return `3.7${randomString}`;\r\n}\r\n\r\n\r\nfunction getRandomValue3() {\r\n    const length = 256;\r\n\r\n    const allowedChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    let randomString = '';\r\n    for (let i = 0; i < 256; i++) {\r\n        const randomIndex = Math.floor(Math.random() * allowedChars.length);\r\n        randomString += allowedChars[randomIndex];\r\n    }\r\n    return randomString;\r\n}\r\n\r\n\r\nfunction scramble(imageData, rotateFunction, isEncrypt) {\r\n    let rand;\r\n    if(isEncrypt)\r\n    {\r\n        rand = getRandomValue3();\r\n        key += rand;\r\n    }\r\n    if(!isEncrypt)\r\n    {\r\n        rand = key.slice(0, 256);\r\n    }\r\n    let random = new Math.seedrandom(rand);\r\n    let max = 257;\r\n    let min = 0;\r\n    for (let index = 0; index < imageData.data.length / 4; index++) {\r\n        let randomNum = () => Math.floor(random() * (max - min)) + min;\r\n        let colorData = getPixel(imageData, index);\r\n        colorData[0] = rotateFunction(colorData[0], randomNum());\r\n        colorData[1] = rotateFunction(colorData[1], randomNum());\r\n        colorData[2] = rotateFunction(colorData[2], randomNum());\r\n        setPixelXY(imageData, Math.floor(index % imageData.width), Math.floor(index / imageData.width), colorData[0], colorData[1], colorData[2], 255);\r\n    }\r\n    return imageData;\r\n}\r\n\r\nlet count = 0;\r\n\r\nfunction rightRotate(source, diff) {\r\n    let circleSize = 256;\r\n    let rotatedVal = (source + diff) % circleSize;\r\n    if (rotatedVal < 0 || rotatedVal > 255) {\r\n        alert(\"wrong\");\r\n    }\r\n    return (source + diff) % circleSize;\r\n}\r\n\r\nfunction leftRotate(source, diff) {\r\n    let circleSize = 256;\r\n    if (source >= diff) {\r\n        return source - diff;\r\n    }\r\n    else {\r\n        return circleSize - (diff - source);\r\n    }\r\n}\r\n\r\n\r\nfunction getPixel(imgData, index) {\r\n    var i = index * 4, d = imgData.data;\r\n    return [d[i], d[i + 1], d[i + 2], d[i + 3]]\r\n}\r\n\r\nfunction getPixelXY(imgData, x, y) {\r\n    return getPixel(imgData, y * imgData.width + x);\r\n}\r\n\r\nfunction setPixel(imgData, index, r, g, b, a) {\r\n    var i = index * 4, d = imgData.data;\r\n    d[i] = r;\r\n    d[i + 1] = g;\r\n    d[i + 2] = b;\r\n    d[i + 3] = a;\r\n}\r\n\r\nfunction setPixelXY(imgData, x, y, r, g, b, a) {\r\n    return setPixel(imgData, y * imgData.width + x, r, g, b, a);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}