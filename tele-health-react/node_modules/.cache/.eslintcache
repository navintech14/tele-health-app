[{"D:\\tele-health\\tele-health-react\\src\\index.js":"1","D:\\tele-health\\tele-health-react\\src\\App.js":"2","D:\\tele-health\\tele-health-react\\src\\RegisterForm.js":"3","D:\\tele-health\\tele-health-react\\src\\baseURL.js":"4","D:\\tele-health\\tele-health-react\\src\\LoginForm.js":"5","D:\\tele-health\\tele-health-react\\src\\ErrorPage.js":"6","D:\\tele-health\\tele-health-react\\src\\HomePage.js":"7","D:\\tele-health\\tele-health-react\\src\\LogoutButton.js":"8","D:\\tele-health\\tele-health-react\\src\\NavBar.js":"9","D:\\tele-health\\tele-health-react\\src\\LoginButton.js":"10","D:\\tele-health\\tele-health-react\\src\\DoctorProfileForm.js":"11","D:\\tele-health\\tele-health-react\\src\\DoctorList.js":"12","D:\\tele-health\\tele-health-react\\src\\DoctorDetailsCard.js":"13","D:\\tele-health\\tele-health-react\\src\\PatientProfileForm.js":"14","D:\\tele-health\\tele-health-react\\src\\DoctorHomePage.js":"15","D:\\tele-health\\tele-health-react\\src\\DoctorSlotAdd.js":"16","D:\\tele-health\\tele-health-react\\src\\DoctorSlotList.js":"17","D:\\tele-health\\tele-health-react\\src\\PatientHomePage.js":"18","D:\\tele-health\\tele-health-react\\src\\PatientImagesPage.js":"19","D:\\tele-health\\tele-health-react\\src\\UploadImageButton.js":"20","D:\\tele-health\\tele-health-react\\src\\encrypt.js":"21","D:\\tele-health\\tele-health-react\\src\\PatientDetailCard.js":"22"},{"size":211,"mtime":1679920218950,"results":"23","hashOfConfig":"24"},{"size":2932,"mtime":1679943361375,"results":"25","hashOfConfig":"24"},{"size":2627,"mtime":1678395554275,"results":"26","hashOfConfig":"24"},{"size":241,"mtime":1684750210525,"results":"27","hashOfConfig":"24"},{"size":2781,"mtime":1681782246930,"results":"28","hashOfConfig":"24"},{"size":125,"mtime":1678055125032,"results":"29","hashOfConfig":"24"},{"size":122,"mtime":1678055091213,"results":"30","hashOfConfig":"24"},{"size":971,"mtime":1678780468869,"results":"31","hashOfConfig":"24"},{"size":1006,"mtime":1684603310010,"results":"32","hashOfConfig":"24"},{"size":345,"mtime":1678394828870,"results":"33","hashOfConfig":"24"},{"size":5482,"mtime":1681782642970,"results":"34","hashOfConfig":"24"},{"size":1871,"mtime":1679093699855,"results":"35","hashOfConfig":"24"},{"size":3154,"mtime":1681947521516,"results":"36","hashOfConfig":"24"},{"size":4516,"mtime":1681782656101,"results":"37","hashOfConfig":"24"},{"size":1625,"mtime":1681953217590,"results":"38","hashOfConfig":"24"},{"size":2394,"mtime":1678829333455,"results":"39","hashOfConfig":"24"},{"size":2429,"mtime":1681953213081,"results":"40","hashOfConfig":"24"},{"size":973,"mtime":1679090765484,"results":"41","hashOfConfig":"24"},{"size":2515,"mtime":1680910180560,"results":"42","hashOfConfig":"24"},{"size":1731,"mtime":1679938476544,"results":"43","hashOfConfig":"24"},{"size":11431,"mtime":1680668635576,"results":"44","hashOfConfig":"24"},{"size":3966,"mtime":1681951571286,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19qe0wz",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"116"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\tele-health\\tele-health-react\\src\\index.js",[],[],"D:\\tele-health\\tele-health-react\\src\\App.js",["128"],[],"import 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport { createContext, useState } from 'react';\nimport RegisterForm from './RegisterForm';\nimport LoginForm from './LoginForm';\nimport HomePage from './HomePage';\nimport ErrorPage from './ErrorPage';\nimport DoctorProfileForm from './DoctorProfileForm';\nimport DoctorList from './DoctorList';\nimport DoctorDetailsCard from './DoctorDetailsCard';\nimport PatientProfileForm from './PatientProfileForm';\nimport DoctorHomePage from './DoctorHomePage';\nimport PatientHomePage from './PatientHomePage';\nimport UploadImageButton from './UploadImageButton';\nimport PatientImagesPage from './PatientImagesPage';\nimport PatientDetailCard from './PatientDetailCard';\nimport NavBar from './NavBar';\n\nexport const AppContext = createContext();\n\n\nfunction App() {\n  const [loggedIn, setLoggedIn]  = useState(false);\n  const [isDoctor, setIsDoctor] = useState(false);\n  const [id, setId] = useState(0);\n  const [doctorId, setDoctorId] = useState(0);\n  const [patientId, setPatientId] = useState(0);\n  const [chosenDoctor, setChosenDoctor] = useState(0);\n  const [selectedPatient, setSelectedPatient] = useState(0);\n\n  return (\n    <AppContext.Provider value = {{loggedIn, setLoggedIn, isDoctor, setIsDoctor, id, setId, doctorId, setDoctorId, patientId, setPatientId, chosenDoctor, setChosenDoctor, selectedPatient, setSelectedPatient}}>\n      <Router>\n        <NavBar />\n        <Routes>\n          <Route path='/' element= {<HomePage />} />\n          <Route path='/home_page_doctor' element = {<DoctorHomePage />} />\n          {/* <Route path='/home_page_patient'>\n            <Route index element = {<PatientHomePage />} />\n            <Route path='doctor_detail' element = {<DoctorDetailsCard />} />\n          </Route> */}\n          {/* <Route path='/home_page_patient' element= {<PatientHomePage/>}>\n            <Route index element = {<PatientHomePage />} />\n            <Route path='doctor_detail' element = {<DoctorDetailsCard />} />\n          </Route> */}\n          <Route path='/patient_detail' element= {<PatientDetailCard/>}/>\n          <Route path='/home_page_patient' element= {<PatientHomePage/>}/>\n          <Route path='/doctor_detail' element = {<DoctorDetailsCard />}/>\n          <Route path='/register' element= {<RegisterForm />} />\n          <Route path='/login' element= {<LoginForm />} />\n          <Route path='/doctor_profile' element = {<DoctorProfileForm />} />\n          <Route path='/doctor_list' element = {<DoctorList />} />\n          <Route path='/my_data' element = {<UploadImageButton />} />\n          <Route path='/patient_profile' element = {<PatientProfileForm />} />\n          <Route path='/my_images' element = {<PatientImagesPage />} />\n          <Route path='*' element= {<ErrorPage />} />\n        </Routes>\n      </Router>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","D:\\tele-health\\tele-health-react\\src\\RegisterForm.js",[],[],[],"D:\\tele-health\\tele-health-react\\src\\baseURL.js",[],[],"D:\\tele-health\\tele-health-react\\src\\LoginForm.js",["129","130","131"],[],"import { useState, useContext } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { BASEURL } from './baseURL';\r\nimport { AppContext } from './App';\r\n\r\nfunction LoginForm(){\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const {isDoctor, setIsDoctor, id, setId, loggedIn, setLoggedIn} = useContext(AppContext);\r\n  \r\n\r\n  const navigate = useNavigate();\r\n\r\n\r\n  async function  LoginUser(){\r\n    axios.post(BASEURL + \"/auth/jwt/create/\",{\r\n      username: username,\r\n      password: password\r\n    }).then(function (response) {\r\n      localStorage.setItem(\"access\",JSON.stringify(response.data[\"access\"]));\r\n      localStorage.setItem(\"refresh\",JSON.stringify(response.data[\"refresh\"]));\r\n        axios.get(BASEURL + \"/auth/users/me/\",{\r\n          headers: {\r\n            authorization: \"JWT \"+ JSON.parse(localStorage.getItem(\"access\"))\r\n          }\r\n        }).then(function (response) {\r\n          console.log(response.data);\r\n          setId((response.data[\"id\"]));\r\n          setLoggedIn(true);\r\n          setIsDoctor(response.data[\"isDoctor\"]);\r\n          response.data[\"isDoctor\"] ? navigate(\"/home_page_doctor\") : navigate(\"/home_page_patient\");\r\n        }).catch(function (error) { \r\n          console.log(error);\r\n        });\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  return(\r\n    <div className=\"container d-flex justify-content-center align-items-center\" style={{height: '100vh'}}>\r\n    <Form className =\"p-5 bg-light border rounded mx-auto col-lg-6\">\r\n    <h2 className=\"mb-4 text-center\">Login Form</h2>\r\n\r\n    <Form.Group controlId=\"LoginForm.username\">\r\n      <Form.Label>Username</Form.Label>\r\n      <Form.Control\r\n          type= \"text\"\r\n          placeholder=\"Username\"\r\n          required\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n    </Form.Group>\r\n\r\n    <Form.Group controlId=\"LoginForm.password\">\r\n      <Form.Label>Password</Form.Label>\r\n      <Form.Control\r\n          type= \"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          onChange={(e) => setPassword(e.target.value)}\r\n      />\r\n    </Form.Group>\r\n    <div className=\"row\">\r\n     <div className=\"mt-3\" ></div>\r\n    <Button \r\n      variant=\"primary\" \r\n      className=\"btn btn-primary btn-block\" \r\n      type=\"submit\"\r\n      onClick={(e) => {\r\n        e.preventDefault(); \r\n        LoginUser();\r\n       }}>\r\n        Login\r\n    </Button>\r\n    <Link className=\"col-12 col-md-6 text-md-right\" to='/register'>\r\n        Register\r\n    </Link>\r\n    </div>\r\n    </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginForm;",[],"D:\\tele-health\\tele-health-react\\src\\ErrorPage.js",[],[],"D:\\tele-health\\tele-health-react\\src\\HomePage.js",[],[],"D:\\tele-health\\tele-health-react\\src\\LogoutButton.js",["132","133"],[],"import { useState, useContext } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { AppContext } from './App';\r\n\r\n\r\n\r\nfunction LogoutButton() {\r\n    const { loggedIn, setLoggedIn } =useContext(AppContext);   //\r\n    const navigate = useNavigate();\r\n\r\n    function removeCookie(){\r\n        localStorage.removeItem(\"access\");\r\n        localStorage.removeItem(\"refresh\");\r\n        localStorage.removeItem(\"id\");\r\n        localStorage.removeItem(\"isLoggedIn\");\r\n        localStorage.removeItem(\"isDoctor\");\r\n        localStorage.removeItem(\"doctor_id\");\r\n        localStorage.removeItem(\"patient_id\");\r\n        setLoggedIn(false);   // \r\n        navigate(\"/login\")\r\n    }\r\n\r\n\r\n  return (\r\n    <Button \r\n      variant=\"outline-primary\"\r\n      type=\"button\"\r\n      onClick={(e) => {\r\n        e.preventDefault(); \r\n        removeCookie()}}>\r\n        Log Out\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default LogoutButton","D:\\tele-health\\tele-health-react\\src\\NavBar.js",[],[],[],"D:\\tele-health\\tele-health-react\\src\\LoginButton.js",[],[],"D:\\tele-health\\tele-health-react\\src\\DoctorProfileForm.js",["134","135"],[],"import { useState, useContext } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { BASEURL } from './baseURL';\r\nimport { AppContext } from './App';\r\n\r\n\r\n\r\nfunction DoctorProfileForm() {\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [experience, setExperience] = useState(0);\r\n  const [cost, setCost] = useState(0);\r\n  const [city, setCity] = useState(\"\");\r\n  const [about, setAbout] = useState(\"\");\r\n  const [degrees, setDegrees] = useState(\"\");\r\n  const [specialization, setSpecialization] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  const { id, setDoctorId} = useContext(AppContext);\r\n\r\n  function postDoctorProfileData()\r\n  {\r\n    const myUser = id;\r\n    console.log(\"---------------\" + myUser)\r\n    axios.post(BASEURL + \"/profile/doctor_profile_list/\",{\r\n        headers: {\r\n            authorization: \"JWT \"+ JSON.parse(localStorage.getItem(\"access\"))\r\n          },\r\n        name: name,\r\n        experience: experience,\r\n        city: city,\r\n        cost: cost,\r\n        about: about,\r\n        degrees: degrees,\r\n        specialization: specialization,\r\n        address: address,\r\n        city: city,\r\n        user: myUser\r\n    }).then(function (response) {\r\n        setDoctorId(response.data.id);\r\n        console.log(response);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Form style={\r\n        {margin: 10}\r\n    }>\r\n        <Form.Group className=\"mb-3\" controlId=\"name\">\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control\r\n                type = \"text\"\r\n                placeholder=\"Your Full Name\"\r\n                required\r\n                onChange={(e) => setName(e.target.value)}\r\n            />\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\" controlId=\"experience\">\r\n            <Form.Label>Experience</Form.Label>\r\n            <Form.Control\r\n                type = \"number\"\r\n                placeholder=\"Experience (In years)\"\r\n                required\r\n                onChange={(e) => setExperience(e.target.value)}\r\n            />\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\" controlId=\"degrees\">\r\n            <Form.Label>Degree</Form.Label>\r\n            <Form.Control\r\n                type = \"text\"\r\n                placeholder=\"Enter degrees as comma seperated values\"\r\n                required\r\n                onChange={(e) => setDegrees(e.target.value)}\r\n            />\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\" controlId=\"specialization\">\r\n            <Form.Label>Specialization</Form.Label>\r\n            <Form.Select \r\n                onChange={(e) => setSpecialization(e.target.value)}\r\n                required>\r\n                <option>Your Specilization</option>\r\n                <option value=\"General Health\">General Health</option>\r\n                <option value=\"Pediatrician\">Pediatrician</option>\r\n                <option value=\"Dentist\">Dentist</option>\r\n                <option value=\"Orthopedist\">Orthopedist</option>\r\n                <option value=\"Dermatologist\">Dermatologist</option>\r\n            </Form.Select>\r\n        </Form.Group>\r\n\r\n\r\n        <Form.Group className=\"mb-3\" controlId=\"price\">\r\n            <Form.Label>Price</Form.Label>\r\n            <Form.Control\r\n                type = \"number\"\r\n                placeholder=\"Price per slot\"\r\n                required\r\n                onChange={(e) => setCost(e.target.value)}\r\n            />\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\" controlId=\"location\">\r\n            <Form.Label>Location</Form.Label>\r\n            <Form.Select\r\n                onChange={(e) => setCity(e.target.value)}\r\n                required>\r\n                <option>City</option>\r\n                <option value=\"Chennai\">Chennai</option>\r\n                <option value=\"Delhi\">Delhi</option>\r\n                <option value=\"Mumbai\">Mumbai</option>\r\n                <option value=\"Kolkata\">Kolkata</option>\r\n                <option value=\"Hydrabad\">Hydrabad</option>\r\n                <option value=\"Banglore\">Banglore</option>         \r\n            </Form.Select>\r\n        </Form.Group>\r\n\r\n    \r\n        <Form.Group className=\"mb-3\" controlId=\"address\">\r\n            <Form.Label>Address</Form.Label>\r\n            <Form.Control\r\n                as=\"textarea\" \r\n                rows={2}\r\n                type = \"text\"\r\n                placeholder=\"Your clinic Address\"\r\n                required\r\n                onChange={(e) => setAddress(e.target.value)}\r\n            />\r\n        </Form.Group>\r\n\r\n        \r\n        <Form.Group className=\"mb-3\" controlId=\"about\">\r\n            <Form.Label>About</Form.Label>\r\n            <Form.Control\r\n                as=\"textarea\" \r\n                rows={5}\r\n                type = \"text\"\r\n                placeholder=\"Tell us about Yourself\"\r\n                required\r\n                onChange={(e) => setAbout(e.target.value)}\r\n            />\r\n        </Form.Group>\r\n\r\n        <Button \r\n          variant=\"primary\" \r\n          className=\"mb-3\" \r\n          type=\"submit\"\r\n          onClick={(e) => {\r\n            e.preventDefault(); \r\n            postDoctorProfileData();\r\n            navigate(\"/home_page_doctor\")}}>\r\n            Submit\r\n        </Button>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default DoctorProfileForm","D:\\tele-health\\tele-health-react\\src\\DoctorList.js",["136"],[],"import { useEffect, useState, useContext } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { BASEURL } from './baseURL';\r\nimport { AppContext } from './App';\r\n\r\n\r\nfunction DoctorList() {\r\n\r\n  const [doctorList, setDoctorList] = useState([]);\r\n  const {chosenDoctor, setChosenDoctor} = useContext(AppContext);\r\n  const navigate = useNavigate();\r\n\r\n    \r\n    useEffect(()=>{\r\n        axios.get(BASEURL + \"/profile/doctor_profile_list/\",{\r\n        }).then(function (response) {\r\n            setDoctorList(response.data);\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n        });\r\n    }, [])\r\n  return (\r\n    <ul className=\"list-unstyled\">\r\n        {doctorList.map((doctor) =>(\r\n            <li key={doctor.id}>\r\n              <Card style={{ width: '18rem' }}>\r\n                <Card.Body>\r\n                  <Card.Title>{doctor.name}</Card.Title>\r\n                  <Badge bg=\"secondary\">{doctor.specialization}</Badge>\r\n                  <Card.Text>{`${doctor.experience} years of experience`}</Card.Text>\r\n                  <Card.Text>{doctor.city}</Card.Text>\r\n                  <Card.Text>{`₹${doctor.cost} consultation fee`}</Card.Text>\r\n                </Card.Body>\r\n                <Button \r\n                  variant=\"success\" \r\n                  className=\"mb-3\" \r\n                  type=\"button\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    setChosenDoctor(doctor.user);\r\n                    navigate(\"/doctor_detail\")}}>\r\n                    Video Consult\r\n                </Button>\r\n              </Card>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default DoctorList","D:\\tele-health\\tele-health-react\\src\\DoctorDetailsCard.js",[],[],"D:\\tele-health\\tele-health-react\\src\\PatientProfileForm.js",[],[],"D:\\tele-health\\tele-health-react\\src\\DoctorHomePage.js",["137"],[],"import React from 'react'\r\nimport { useEffect, useState, useContext } from 'react';\r\nimport DoctorSlotAdd from './DoctorSlotAdd'\r\nimport DoctorSlotList from './DoctorSlotList';\r\nimport axios from 'axios';\r\nimport { BASEURL } from './baseURL';\r\nimport { AppContext } from './App';\r\n\r\n\r\nfunction DoctorHomePage() {\r\n\r\n    const [dateTime, setDateTime] = useState(\"\");\r\n    const [slotList, setSlotList] = useState([]);\r\n    const {id, setDoctorId, doctorId} = useContext(AppContext);\r\n\r\n    useEffect(()=>{\r\n    const profileDetails = async() =>{\r\n        try {\r\n            const response = await axios.get(BASEURL + `/profile/doctor_profile_details/${id}`);\r\n            console.log(\"from doctor home page use effect\")\r\n            console.log(response);\r\n            localStorage.setItem(\"doctor_id\",JSON.stringify(response.data[\"id\"]));\r\n            setDoctorId(response.data[\"id\"]);\r\n        } catch(error){\r\n            console.error(error);\r\n        }};\r\n        profileDetails();\r\n    }, [doctorId])\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n\r\n        <div className=\"col-md-8\">\r\n                <DoctorSlotList \r\n                        slotList = {slotList}\r\n                        setSlotList = {setSlotList}/>\r\n        </div>\r\n\r\n        <div className=\"col-md-4\">\r\n                <DoctorSlotAdd \r\n                    dateTime = {dateTime}\r\n                    setDateTime = {setDateTime}\r\n                    slotList = {slotList}\r\n                    setSlotList = {setSlotList}/>\r\n        </div>\r\n\r\n      </div>\r\n    </div>  \r\n    \r\n  );\r\n};\r\n\r\nexport default DoctorHomePage","D:\\tele-health\\tele-health-react\\src\\DoctorSlotAdd.js",["138","139"],[],"import { useEffect, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport axios from 'axios';\r\nimport { BASEURL } from './baseURL';\r\n\r\n\r\nfunction DoctorSlotAdd( {dateTime, setDateTime, slotList, setSlotList} ) {\r\n\r\n  function addEntry()\r\n  {\r\n    const myDateTime = new Date(dateTime).getTime() + 30*60*1000;\r\n    const myNewSlot = {\r\n      doctorProfile: JSON.parse(localStorage.getItem(\"doctor_id\")),\r\n      booking_date: dateTime.slice(0, 10),\r\n      start_time: dateTime.slice(12, 16),\r\n      end_time: new Date(myDateTime).toTimeString().slice(0, 5)\r\n    }\r\n    setSlotList([...slotList , myNewSlot]);\r\n    console.log(myNewSlot);\r\n    axios.post(BASEURL + \"/profile/book_slots_list/\",{\r\n      headers: {\r\n          authorization: \"JWT \"+ JSON.parse(localStorage.getItem(\"access\"))\r\n        },\r\n        doctorProfile: myNewSlot.doctorProfile,\r\n        booking_date: myNewSlot.booking_date,\r\n        start_time: myNewSlot.start_time,\r\n        end_time: myNewSlot.end_time\r\n      }).then(function (response) {\r\n        console.log(response);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <OverlayTrigger \r\n      trigger = \"click\"\r\n      key = \"right\"\r\n      placement=\"right\"\r\n      overlay={\r\n        <Form style={\r\n          {margin: 10 , backgroundColor: \"grey\"}\r\n        }>\r\n          <Form.Group className=\"mb-3\" controlId=\"book_date\" >\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"book_time\">\r\n              <Form.Label>Date and Time</Form.Label>\r\n              <Form.Control\r\n                  type = \"datetime-local\"\r\n                  placeholder=\"date_time\"\r\n                  required\r\n                  onChange={(e) => setDateTime(e.target.value)}\r\n              />\r\n              <Button \r\n                variant=\"primary\" \r\n                className=\"mb-3\" \r\n                type=\"submit\"\r\n                onClick={(e) => {\r\n                  e.preventDefault(); \r\n                  addEntry();\r\n                  }}>\r\n                  Confirm\r\n              </Button>\r\n            </Form.Group>\r\n          </Form>\r\n      }\r\n      >\r\n      <Button variant=\"secondary\">Add Slots</Button>\r\n      </OverlayTrigger>\r\n  )\r\n}\r\n\r\nexport default DoctorSlotAdd","D:\\tele-health\\tele-health-react\\src\\DoctorSlotList.js",["140","141","142","143","144","145"],[],"import { useEffect, useState, useContext } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from 'axios';\r\nimport { BASEURL } from './baseURL';\r\nimport { Card, Container, Row, Col } from 'react-bootstrap';\r\nimport { AppContext } from './App';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\n\r\n\r\n\r\nfunction DoctorSlotList( {slotList, setSlotList} ) {\r\n\r\n  const {isDoctor, setIsDoctor, doctorId, setSelectedPatient} = useContext(AppContext);\r\n  const navigate = useNavigate();\r\n  \r\n  useEffect(()=>{\r\n    const callSlotList = async() =>{\r\n      try{\r\n        const response = await axios.get(BASEURL + `/profile/book_slots_list/${doctorId}`);\r\n        console.log(\"from doctor slot list use effect\")\r\n        console.log(response.data);\r\n        setSlotList(response.data);\r\n      }\r\n      catch(error){\r\n        console.error(error);\r\n      }}\r\n      callSlotList();\r\n  }, [doctorId]);\r\n\r\n  return (\r\n    <Container className=\"m-1\">\r\n    <Row>\r\n    <ul className=\"list-unstyled\">\r\n    \r\n      {slotList.map((slot) =>(\r\n        <li key={slot.id}>\r\n          <Card className=\"mb-4\" style={{ maxWidth: '350px' }}>\r\n          <Card.Title tag=\"h5\">{slot.patientProfile? slot.patientProfile.name : \"Not Booked\"}</Card.Title>\r\n          <Card.Text>Date: {slot.booking_date}</Card.Text>\r\n          <Card.Text>Start Time: {slot.start_time}</Card.Text>\r\n          <Card.Text>End Time: {slot.end_time}</Card.Text>\r\n          {slot.patientProfile &&\r\n            <Button\r\n            variant=\"primary\"\r\n            className=\"custom-btn\" \r\n            style={{ width: \"50%\" }}\r\n            type=\"button\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              console.log(slot.patientProfile)\r\n              setSelectedPatient(slot.patientProfile.id);\r\n              navigate(\"/patient_detail\");\r\n              }}>\r\n              See Details\r\n              </Button>\r\n            }\r\n            {slot.patientProfile &&\r\n              <Button\r\n              variant=\"primary\"\r\n              className=\"custom-btn mt-2\" \r\n              style={{ width: \"50%\" }}\r\n              type=\"button\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n              }}>\r\n                Call\r\n            </Button>\r\n            }\r\n            \r\n          </Card>\r\n        </li>\r\n      ))}\r\n    \r\n    </ul>\r\n    </Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default DoctorSlotList","D:\\tele-health\\tele-health-react\\src\\PatientHomePage.js",["146","147","148","149","150"],[],"import React from 'react'\r\nimport { useEffect, useState, useContext, createContext } from 'react';\r\nimport axios from 'axios';\r\nimport { BASEURL } from './baseURL';\r\nimport DoctorList from './DoctorList';\r\nimport { AppContext } from './App';\r\n\r\n\r\nexport const PatientContext = createContext();\r\n\r\nfunction PatientHomePage() {\r\n\r\n    const {id, patientId, setPatientId, chosenDoctor, setChosenDoctor} = useContext(AppContext);\r\n\r\n    \r\n\r\n    useEffect(()=>{\r\n        const profileDetails = async() =>{\r\n            try {\r\n                const response = await axios.get(BASEURL + `/profile/patient_profile_details/${id}`);\r\n                console.log(response);\r\n                setPatientId(response.data[\"id\"]);\r\n            } catch(error){\r\n                console.error(error);\r\n            }};\r\n            profileDetails();\r\n        }, [])\r\n    \r\n\r\n  return (\r\n    <div>\r\n    PatientHomePage\r\n    <DoctorList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientHomePage","D:\\tele-health\\tele-health-react\\src\\PatientImagesPage.js",["151"],[],"import React from 'react'\r\nimport { useState, useEffect, useContext } from 'react';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Figure from 'react-bootstrap/Figure';\r\nimport axios from 'axios';\r\nimport { AppContext } from './App';\r\nimport { BASEURL } from './baseURL';\r\nimport { AWSBASEIMAGES } from './baseURL';\r\nimport UploadImageButton from './UploadImageButton'\r\nimport {decrypt} from './encrypt.js'\r\n\r\n\r\n\r\nfunction PatientImagesPage() {\r\n\r\n    const {patientId} = useContext(AppContext);\r\n    const [imageList, setImageList] = useState([]);\r\n\r\n\r\n\r\n    useEffect(() =>{\r\n        axios\r\n        .get(BASEURL+`/profile/my_image_list/${patientId}`)\r\n        .then(function (response) {\r\n            const imageList = response.data;\r\n            const decryptionPromises = imageList.map((image) =>{\r\n                const str = image.image;\r\n                const lastSlashIndex = str.lastIndexOf('/');\r\n                const result = str.substring(lastSlashIndex);\r\n                const url = AWSBASEIMAGES + result;\r\n                return axios\r\n                .get(url, { responseType: 'blob' })\r\n                .then((response) => {\r\n                    const blob = response.data;\r\n                    const filename = image.image.split('/').pop(); \r\n                    const file = new File([blob], filename, { type: image.mime_type });\r\n                    return decrypt(file, image.key);\r\n                });\r\n            });\r\n            Promise.all(decryptionPromises)\r\n            .then((decryptedFiles) => {\r\n            const decryptedImages = decryptedFiles.map((file) =>\r\n                URL.createObjectURL(file)\r\n            );\r\n            setImageList(decryptedImages);\r\n            console.log(decryptedImages)\r\n            })\r\n            .catch((error) => {\r\n            console.error(error);\r\n            });\r\n        })\r\n        .catch((error) => {\r\n        console.error(error);\r\n        });\r\n    }, []);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n        <ListGroup className=\"list-unstyled\">\r\n            {imageList.map((imageUrl, index) => (\r\n                <li key={index}>\r\n                    <ListGroup.Item>\r\n                        <Figure.Image\r\n                        src={imageUrl}\r\n                        />\r\n                </ListGroup.Item>\r\n                </li>\r\n            ))}\r\n        </ListGroup>\r\n        <UploadImageButton \r\n        imageList = {imageList}\r\n        setImageList = {setImageList}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PatientImagesPage",[],"D:\\tele-health\\tele-health-react\\src\\UploadImageButton.js",["152"],[],"import React from 'react'\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useContext, useState } from 'react';\r\nimport { AppContext } from './App';\r\nimport axios from 'axios';\r\nimport { BASEURL } from './baseURL';\r\nimport { Button } from 'react-bootstrap';\r\nimport encrypt from './encrypt';\r\n\r\nfunction UploadImageButton( {imageList, setImageList} ) {\r\n\r\n  const {patientId} = useContext(AppContext);\r\n  const [image, setImage] = useState(null);\r\n\r\n  function sendFile()\r\n  {\r\n      const res = encrypt(image, (result) =>{\r\n      const [encryptedImage, key] = result;\r\n      const formData = new FormData();\r\n      formData.append(\"image\", encryptedImage, image.name);\r\n      formData.append(\"patientProfile\", patientId);\r\n      formData.append(\"key\", key);\r\n      axios.post(BASEURL+\"/profile/image_list/\", formData, {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      }).then(function (response) {\r\n        console.log(response);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n    });\r\n    });\r\n  }\r\n\r\n\r\n  return (\r\n    <Form.Group controlId=\"formFile\" className=\"mb-3\">\r\n      <Form.Label>Upload Image</Form.Label>\r\n      <Form.Control \r\n          type=\"file\" \r\n          accept=\"image/*\" \r\n          onChange={(e)=>{\r\n            setImage(e.target.files[0]);\r\n            }\r\n          }/>\r\n        <Button\r\n          variant=\"primary\" \r\n          className=\"mb-3\"\r\n          type=\"submit\"\r\n          onClick= {(e)=>sendFile(e)}>\r\n          Upload\r\n        </Button>\r\n    </Form.Group>\r\n  )\r\n}\r\n\r\nexport default UploadImageButton\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// encrypt input = File with name and type\r\n// encrypt output = blob\r\n\r\n\r\n\r\n// decrypt api output -> image url without server root, key","D:\\tele-health\\tele-health-react\\src\\encrypt.js",["153","154","155","156","157","158","159","160","161"],[],"export default function encrypt(file, callback){\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n        const image = new Image();\r\n        image.src = reader.result;\r\n        let key = \"\";\r\n        image.onload = () => {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = image.width;\r\n            canvas.height = image.height;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(image, 0, 0);\r\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n            const [encryptedImageData, key1] = scramble(imageData, (source, diff) => {\r\n                return leftRotate(source, diff);\r\n            }, true, key)\r\n            //const [encryptedImageDataFinal, key2] = encryptImageData1(encryptedImageData, key1);\r\n            ctx.putImageData(encryptedImageData, 0, 0);\r\n\r\n            canvas.toBlob((blob) => {\r\n                callback([blob, key1]);\r\n              }, 'image/png');\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function decrypt(file, decryptionKey){ \r\n    return new Promise((resolve, reject) => {\r\n        const img = new Image();\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n            img.onload = () => {\r\n                //console.log(\"Key value goten out of API call\" + decryptionKey);\r\n                const canvas = document.createElement('canvas');\r\n                canvas.width = img.width;\r\n                canvas.height = img.height;\r\n                const ctx = canvas.getContext('2d');\r\n                ctx.drawImage(img, 0, 0);\r\n                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n\r\n                //const decryptedImageData1 = decryptImageData1(imageData, decryptionKey);\r\n                //console.log(\"Key cal in decrypt function after decryptImageData1 call\" + decryptionKey);\r\n                const [decryptedImageDataFinal, key] = scramble(imageData, (source, diff) => {\r\n                    return rightRotate(source, diff);\r\n                }, false, decryptionKey)\r\n                //console.log(\"Key cal in decrypt function after scramble call\" + key);\r\n\r\n\r\n                imageData.data.set(decryptedImageDataFinal);\r\n                ctx.putImageData(imageData, 0, 0);\r\n                canvas.toBlob((blob) => {\r\n                    const decryptedFile = new File([blob], file.name, { type: file.type });\r\n                    resolve(decryptedFile);\r\n                  }, file.type);\r\n                };\r\n                img.src = reader.result;\r\n                };\r\n                reader.readAsDataURL(file);\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction encryptImageData1(imageData, key) {\r\n    let x = getRandomValue1(); \r\n    let r = getRandomValue2(); \r\n    const rKey = r.toString().substring(r.toString().indexOf('.') + 1);\r\n    const xKey = x.toString().substring(x.toString().indexOf('.') + 1);\r\n    key += String(xKey);\r\n    key += String(rKey);\r\n    for (let i = 0; i < imageData.data.length; i++) {\r\n      x = r * x * (1 - x); \r\n      imageData.data[i] ^= Math.floor(x * 256);\r\n    }\r\n    return [imageData, key];\r\n}\r\n\r\n\r\nfunction decryptImageData1(encryptedImageData, key) {\r\n    console.log(\"Key value passed to decryptImageData1\" + key);\r\n    let x = key.slice(256, 264);\r\n    x = Number(parseFloat(\"0.\" + x));\r\n    console.log(\"X value\" + x);\r\n    let r = key.slice(264, 272);\r\n    r = Number(parseFloat(\"3.\" + r));\r\n    console.log(\"r value\" + r);\r\n    for (let i = 0; i < encryptedImageData.data.length; i++) {\r\n      x = r * x * (1 - x);\r\n      encryptedImageData.data[i] ^= Math.floor(x * 256); \r\n    }\r\n    return encryptedImageData;\r\n}\r\n\r\n\r\nfunction getRandomValue1() {\r\n    const allowedChars = '0123456789';\r\n\r\n    let randomString = '';\r\n    for (let i = 0; i < 8; i++) {\r\n        const randomIndex = Math.floor(Math.random() * allowedChars.length);\r\n        randomString += allowedChars[randomIndex];\r\n    }\r\n    return `0.${randomString}`;\r\n}\r\n\r\nfunction getRandomValue2() {\r\n    const allowedChars = '0123456789';\r\n\r\n    let randomString = '';\r\n    for (let i = 0; i < 7; i++) {\r\n        const randomIndex = Math.floor(Math.random() * allowedChars.length);\r\n        randomString += allowedChars[randomIndex];\r\n    }\r\n    return `3.7${randomString}`;\r\n}\r\n\r\n\r\nfunction getRandomValue3() {\r\n    const length = 256;\r\n\r\n    const allowedChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    let randomString = '';\r\n    for (let i = 0; i < 256; i++) {\r\n        const randomIndex = Math.floor(Math.random() * allowedChars.length);\r\n        randomString += allowedChars[randomIndex];\r\n    }\r\n    return randomString;\r\n}\r\n\r\n\r\nfunction scramble(imageData, rotateFunction, isEncrypt, key) {\r\n    let rand;\r\n    if(isEncrypt)\r\n    {\r\n        rand = getRandomValue3();\r\n        key += rand;\r\n    }\r\n    if(!isEncrypt)\r\n    {\r\n        rand = key.slice(0, 256);\r\n    }\r\n    console.log(\"key value in scramble\" + key)\r\n    console.log(\"Rand key value in scramble\" + rand)\r\n    let random = new Math.seedrandom(rand);\r\n    let max = 257;\r\n    let min = 0;\r\n    for (let index = 0; index < imageData.data.length / 4; index++) {\r\n        let randomNum = () => Math.floor(random() * (max - min)) + min;\r\n        let colorData = getPixel(imageData, index);\r\n        colorData[0] = rotateFunction(colorData[0], randomNum());\r\n        colorData[1] = rotateFunction(colorData[1], randomNum());\r\n        colorData[2] = rotateFunction(colorData[2], randomNum());\r\n        setPixelXY(imageData, Math.floor(index % imageData.width), Math.floor(index / imageData.width), colorData[0], colorData[1], colorData[2], 255);\r\n    }\r\n    return [imageData, key];\r\n}\r\n\r\n\r\nfunction rightRotate(source, diff) {\r\n    let circleSize = 256;\r\n    let rotatedVal = (source + diff) % circleSize;\r\n    if (rotatedVal < 0 || rotatedVal > 255) {\r\n        alert(\"wrong\");\r\n    }\r\n    return (source + diff) % circleSize;\r\n}\r\n\r\nfunction leftRotate(source, diff) {\r\n    let circleSize = 256;\r\n    if (source >= diff) {\r\n        return source - diff;\r\n    }\r\n    else {\r\n        return circleSize - (diff - source);\r\n    }\r\n}\r\n\r\n\r\nfunction getPixel(imgData, index) {\r\n    var i = index * 4, d = imgData.data;\r\n    return [d[i], d[i + 1], d[i + 2], d[i + 3]]\r\n}\r\n\r\nfunction getPixelXY(imgData, x, y) {\r\n    return getPixel(imgData, y * imgData.width + x);\r\n}\r\n\r\nfunction setPixel(imgData, index, r, g, b, a) {\r\n    var i = index * 4, d = imgData.data;\r\n    d[i] = r;\r\n    d[i + 1] = g;\r\n    d[i + 2] = b;\r\n    d[i + 3] = a;\r\n}\r\n\r\nfunction setPixelXY(imgData, x, y, r, g, b, a) {\r\n    return setPixel(imgData, y * imgData.width + x, r, g, b, a);\r\n}\r\n\r\n\r\nfunction encryptImageRook(image) {\r\n    var height = image.height;\r\n    var width = image.width;\r\n  \r\n    for (var y = 0; y < height; y++) {\r\n      for (var x = 0; x < width; x++) {\r\n        var steps = Math.floor(Math.random() * (width - x));\r\n        var direction = Math.random() < 0.5 ? -1 : 1;\r\n  \r\n        var currentX = x;\r\n        var currentY = y;\r\n        for (var i = 0; i < steps; i++) {\r\n          if (direction < 0) {\r\n            currentX--;\r\n            if (currentX < 0) {\r\n              currentX = width - 1;\r\n            }\r\n          } else {\r\n            currentX++;\r\n            if (currentX >= width) {\r\n              currentX = 0;\r\n            }\r\n          }\r\n          var temp = image.data[(currentY * width + currentX) * 4];\r\n          image.data[(currentY * width + currentX) * 4] = image.data[(y * width + x) * 4];\r\n          image.data[(y * width + x) * 4] = temp;\r\n        }\r\n      }\r\n    }\r\n  \r\n    return image;\r\n  }\r\n  \r\n\r\n  function decryptImageRook(image) {\r\n    var height = image.height;\r\n    var width = image.width;\r\n  \r\n    // Loop through each pixel in the image (in reverse order)\r\n    for (var y = height - 1; y >= 0; y--) {\r\n      for (var x = width - 1; x >= 0; x--) {\r\n        // Generate the same number of steps and direction as in the encryption process\r\n        var steps = Math.floor(Math.random() * (width - x));\r\n        var direction = Math.random() < 0.5 ? -1 : 1;\r\n  \r\n        // Move the rook and swap the pixels (in reverse order)\r\n        var currentX = x;\r\n        var currentY = y;\r\n        for (var i = 0; i < steps; i++) {\r\n          if (direction < 0) {\r\n            currentX--;\r\n            if (currentX < 0) {\r\n              currentX = width - 1;\r\n            }\r\n          } else {\r\n            currentX++;\r\n            if (currentX >= width) {\r\n              currentX = 0;\r\n            }\r\n          }\r\n          var temp = image.data[(currentY * width + currentX) * 4];\r\n          image.data[(currentY * width + currentX) * 4] = image.data[(y * width + x) * 4];\r\n          image.data[(y * width + x) * 4] = temp;\r\n        }\r\n      }\r\n    }\r\n  \r\n    return image;\r\n  }\r\n\r\n\r\n  function encryptImageQueen(image) {\r\n    var height = image.height;\r\n    var width = image.width;\r\n  \r\n    for (var y = 0; y < height; y++) {\r\n      for (var x = 0; x < width; x++) {\r\n        var stepsX = Math.floor(Math.random() * (width - x));\r\n        var directionX = Math.random() < 0.5 ? -1 : 1;\r\n        var stepsY = Math.floor(Math.random() * (height - y));\r\n        var directionY = Math.random() < 0.5 ? -1 : 1;\r\n  \r\n\r\n        var currentX = x;\r\n        var currentY = y;\r\n        for (var i = 0; i < Math.max(stepsX, stepsY); i++) {\r\n          if (i < stepsX) {\r\n            currentX += directionX;\r\n            if (currentX < 0) {\r\n              currentX = width - 1;\r\n            } else if (currentX >= width) {\r\n              currentX = 0;\r\n            }\r\n          }\r\n          if (i < stepsY) {\r\n            currentY += directionY;\r\n            if (currentY < 0) {\r\n              currentY = height - 1;\r\n            } else if (currentY >= height) {\r\n              currentY = 0;\r\n            }\r\n          }\r\n          var temp = image.data[(currentY * width + currentX) * 4];\r\n          image.data[(currentY * width + currentX) * 4] = image.data[(y * width + x) * 4];\r\n          image.data[(y * width + x) * 4] = temp;\r\n        }\r\n      }\r\n    }\r\n  \r\n    return image;\r\n  }\r\n  \r\nfunction decryptImageQueen(image) {\r\n  var height = image.height;\r\n  var width = image.width;\r\n\r\n  for (var y = height - 1; y >= 0; y--) {\r\n    for (var x = width - 1; x >= 0; x--) {\r\n    \r\n      var stepsX = Math.floor(Math.random() * (width - x));\r\n      var directionX = Math.random() < 0.5 ? -1 : 1;\r\n      var stepsY = Math.floor(Math.random() * (height - y));\r\n      var directionY = Math.random() < 0.5 ? -1 : 1;\r\n\r\n      var currentX = x;\r\n      var currentY = y;\r\n      for (var i = 0; i < Math.max(stepsX, stepsY); i++) {\r\n        if (i < stepsX) {\r\n          currentX += directionX;\r\n          if (currentX < 0) {\r\n            currentX = width - 1;\r\n          } else if (currentX >= width) {\r\n            currentX = 0;\r\n          }\r\n        }\r\n        if (i < stepsY) {\r\n          currentY += directionY;\r\n          if (currentY < 0) {\r\n            currentY = height - 1;\r\n          } else if (currentY >= height) {\r\n            currentY = 0;\r\n          }\r\n        }\r\n        var temp = image.data[(currentY * width + currentX\r\n          ) * 4];\r\n          image.data[(currentY * width + currentX) * 4] = image.data[(y * width + x) * 4];\r\n          image.data[(y * width + x) * 4] = temp;\r\n          }\r\n          }\r\n          }\r\n          \r\n          return image;\r\n          }  ","D:\\tele-health\\tele-health-react\\src\\PatientDetailCard.js",[],[],{"ruleId":"162","severity":1,"message":"163","line":2,"column":50,"nodeType":"164","messageId":"165","endLine":2,"endColumn":54},{"ruleId":"162","severity":1,"message":"166","line":14,"column":10,"nodeType":"164","messageId":"165","endLine":14,"endColumn":18},{"ruleId":"162","severity":1,"message":"167","line":14,"column":33,"nodeType":"164","messageId":"165","endLine":14,"endColumn":35},{"ruleId":"162","severity":1,"message":"168","line":14,"column":44,"nodeType":"164","messageId":"165","endLine":14,"endColumn":52},{"ruleId":"162","severity":1,"message":"169","line":1,"column":10,"nodeType":"164","messageId":"165","endLine":1,"endColumn":18},{"ruleId":"162","severity":1,"message":"168","line":9,"column":13,"nodeType":"164","messageId":"165","endLine":9,"endColumn":21},{"ruleId":"162","severity":1,"message":"163","line":4,"column":23,"nodeType":"164","messageId":"165","endLine":4,"endColumn":27},{"ruleId":"170","severity":1,"message":"171","line":41,"column":9,"nodeType":"172","messageId":"173","endLine":41,"endColumn":13},{"ruleId":"162","severity":1,"message":"174","line":14,"column":10,"nodeType":"164","messageId":"165","endLine":14,"endColumn":22},{"ruleId":"175","severity":1,"message":"176","line":28,"column":8,"nodeType":"177","endLine":28,"endColumn":18,"suggestions":"178"},{"ruleId":"162","severity":1,"message":"179","line":1,"column":10,"nodeType":"164","messageId":"165","endLine":1,"endColumn":19},{"ruleId":"162","severity":1,"message":"169","line":1,"column":21,"nodeType":"164","messageId":"165","endLine":1,"endColumn":29},{"ruleId":"162","severity":1,"message":"169","line":1,"column":21,"nodeType":"164","messageId":"165","endLine":1,"endColumn":29},{"ruleId":"162","severity":1,"message":"180","line":5,"column":32,"nodeType":"164","messageId":"165","endLine":5,"endColumn":35},{"ruleId":"162","severity":1,"message":"163","line":7,"column":23,"nodeType":"164","messageId":"165","endLine":7,"endColumn":27},{"ruleId":"162","severity":1,"message":"166","line":13,"column":10,"nodeType":"164","messageId":"165","endLine":13,"endColumn":18},{"ruleId":"162","severity":1,"message":"181","line":13,"column":20,"nodeType":"164","messageId":"165","endLine":13,"endColumn":31},{"ruleId":"175","severity":1,"message":"182","line":28,"column":6,"nodeType":"177","endLine":28,"endColumn":16,"suggestions":"183"},{"ruleId":"162","severity":1,"message":"169","line":2,"column":21,"nodeType":"164","messageId":"165","endLine":2,"endColumn":29},{"ruleId":"162","severity":1,"message":"184","line":13,"column":16,"nodeType":"164","messageId":"165","endLine":13,"endColumn":25},{"ruleId":"162","severity":1,"message":"174","line":13,"column":41,"nodeType":"164","messageId":"165","endLine":13,"endColumn":53},{"ruleId":"162","severity":1,"message":"185","line":13,"column":55,"nodeType":"164","messageId":"165","endLine":13,"endColumn":70},{"ruleId":"175","severity":1,"message":"186","line":27,"column":12,"nodeType":"177","endLine":27,"endColumn":14,"suggestions":"187"},{"ruleId":"175","severity":1,"message":"188","line":55,"column":8,"nodeType":"177","endLine":55,"endColumn":10,"suggestions":"189"},{"ruleId":"162","severity":1,"message":"190","line":17,"column":13,"nodeType":"164","messageId":"165","endLine":17,"endColumn":16},{"ruleId":"162","severity":1,"message":"191","line":48,"column":49,"nodeType":"164","messageId":"165","endLine":48,"endColumn":52},{"ruleId":"162","severity":1,"message":"192","line":74,"column":10,"nodeType":"164","messageId":"165","endLine":74,"endColumn":27},{"ruleId":"162","severity":1,"message":"193","line":89,"column":10,"nodeType":"164","messageId":"165","endLine":89,"endColumn":27},{"ruleId":"162","severity":1,"message":"194","line":129,"column":11,"nodeType":"164","messageId":"165","endLine":129,"endColumn":17},{"ruleId":"162","severity":1,"message":"195","line":195,"column":10,"nodeType":"164","messageId":"165","endLine":195,"endColumn":20},{"ruleId":"162","severity":1,"message":"196","line":212,"column":10,"nodeType":"164","messageId":"165","endLine":212,"endColumn":26},{"ruleId":"162","severity":1,"message":"197","line":246,"column":12,"nodeType":"164","messageId":"165","endLine":246,"endColumn":28},{"ruleId":"162","severity":1,"message":"198","line":283,"column":12,"nodeType":"164","messageId":"165","endLine":283,"endColumn":29},{"ruleId":"162","severity":1,"message":"199","line":324,"column":10,"nodeType":"164","messageId":"165","endLine":324,"endColumn":27},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'isDoctor' is assigned a value but never used.","'id' is assigned a value but never used.","'loggedIn' is assigned a value but never used.","'useState' is defined but never used.","no-dupe-keys","Duplicate key 'city'.","ObjectExpression","unexpected","'chosenDoctor' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'setDoctorId'. Either include them or remove the dependency array.","ArrayExpression",["200"],"'useEffect' is defined but never used.","'Col' is defined but never used.","'setIsDoctor' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setSlotList'. Either include it or remove the dependency array. If 'setSlotList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["201"],"'patientId' is assigned a value but never used.","'setChosenDoctor' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id' and 'setPatientId'. Either include them or remove the dependency array.",["202"],"React Hook useEffect has a missing dependency: 'patientId'. Either include it or remove the dependency array.",["203"],"'res' is assigned a value but never used.","'key' is assigned a value but never used.","'encryptImageData1' is defined but never used.","'decryptImageData1' is defined but never used.","'length' is assigned a value but never used.","'getPixelXY' is defined but never used.","'encryptImageRook' is defined but never used.","'decryptImageRook' is defined but never used.","'encryptImageQueen' is defined but never used.","'decryptImageQueen' is defined but never used.",{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},"Update the dependencies array to be: [doctorId, id, setDoctorId]",{"range":"212","text":"213"},"Update the dependencies array to be: [doctorId, setSlotList]",{"range":"214","text":"215"},"Update the dependencies array to be: [id, setPatientId]",{"range":"216","text":"217"},"Update the dependencies array to be: [patientId]",{"range":"218","text":"219"},[994,1004],"[doctorId, id, setDoctorId]",[906,916],"[doctorId, setSlotList]",[843,845],"[id, setPatientId]",[1947,1949],"[patientId]"]